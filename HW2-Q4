<!DOCTYPE html>
<head>
  <title>Games Rating: 2015 - 2019</title>
  <meta charset="utf-8">
  <script type="text/javascript" src="../lib/d3.v5.min.js"></script>
  <script type="text/javascript" src="../lib/d3-dsv.min.js"></script>
</head>

<body>

<!-- <div id="title">Games Rating: 2015 - 2019</div> -->
<div id="gtID">rsahai6</div>

<script>

//defining Margins
    var margin = {top: 40, right: 40, bottom: 100, left: 40},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

// SVG
	var svg = d3.select("body")
	  .append("svg")
	    .attr("width",width+margin.left+margin.right)
	    .attr("height",height+margin.top+margin.bottom)
	    .append("g")
	    .attr("transform", "translate("+margin.left+","+margin.top+")");
 //var pathToCsv = "boardgame_ratings.csv"; 

var color = d3.scaleOrdinal(d3.schemeCategory10)




 
 //Get data
 d3.dsv(",", "average-rating.csv", function(d){
    return {
    	name: d.name
    	,year: d.year
    	, average_rating: Math.floor(d.average_rating)
    	, users_rated: +d.users_rated
    };
}).then(function(data){

var	filterData = data.filter(function(d){
	 if (d["year"] == "2015" || d["year"] == "2016" ||d["year"] == "2017" ||d["year"] == "2018" ||d["year"] == "2019"  ) {
	 	return d;

	 }
	
		});

 console.log(filterData)
	//var gdata = filterData

	var grouped_ratings = d3.nest()
	 //.key(function(d){return d.average_rating;}).sortKeys(d3.ascending)
	 	
	  .key(function(d){return d.year;}).sortKeys(d3.ascending)
	   .key(function(d){return d.average_rating;}).sortKeys(d3.ascending)
	   . rollup(function (leaves){ return leaves.length})
	 	
		  // .rollup(function(cntrev){return{"cntrev":cntrev, "ratings": d3.sum(cntrev, function(d){
		 	// return parseInt(filterData.average_rating);
		

		 // .rollup(function(occ){return{"average_rating":occ[0].average_rating,"occ":occ,"tot_rat":d3.sum(occ,function(d){return parseInt(d.average_rating);})}})
		
		
	 
		.entries(data)


		var grouped_ratingsTopMovies = d3.nest()
			.key(function (d) {return d.year}).sortKeys(d3.ascending)
			.key(function (d) {return d.average_rating}).sortKeys(d3.ascending)
			.sortValues(function (i,j ) {return parseFloat(j.users_rated) - parseFloat(i.users_rated);})
			.entries(data);
		

//console.log(grouped_ratings)

var maxYear =0;

Array.prototype.sortOn = function (key){
	this.sort(function (i,j) {
		if (i[key] <j[key])  {
			return -1;

		} else if (i[key] >j[key]) {
			return 1;
		}
		 return 0;
	});
}

for (let m = 0; m < grouped_ratings.length; m++) {
	var temparry = ["0","1","2","3","4", "5", "6", "7", "8", "9"]

	for (let n = 0;
		 n < grouped_ratings[m].values.length;
		  n++){

		temparry = temparry.filter( l => l !=grouped_ratings[m].values[n].key)

		if (grouped_ratings[m].values[n].value > maxYear) {
			maxYear = grouped_ratings[m].values[n].value
		}
	}

	for (let r = 0; r < temparry.length; r++) {

		grouped_ratings[m].values.push({"key":temparry[r], "value" : 0})
	}

 grouped_ratings[m].values.sortOn("key")
}

console.log(grouped_ratings)

for (let m = 0; 
	m < grouped_ratingsTopMovies.length; m++) {
                var temparry = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

                for (let n = 0; n < grouped_ratingsTopMovies[m].values.length; n++) {

                    temparry = temparry.filter(l => l != grouped_ratingsTopMovies[m].values[n].key)

                    if (grouped_ratingsTopMovies[m].values[n].value > maxYear) {
                        maxYear = grouped_ratingsTopMovies[m].values[n].value
              
                    }
                }

                for (let r = 0; r < temparry.length; r++) {

                    grouped_ratingsTopMovies[m].values.push({ "key": temparry[r], "value": 0 })
                }


                grouped_ratingsTopMovies[m].values.sortOn("key")
            }




			let id = 0;
            const ids = function () {
                return "line-" + id++;
            }

            var ratLines = svg.append("g")
                .attr("id", "lines")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

			var xScale =d3.scaleLinear()
				.range([0,width])
				.domain([0,9]);
	//.domain(d3.extent(data, function(d){
          //  return new Date(parseInt(filterData.year),0);})); 

// var yScale =d3.scaleLinear()
// 	.range(height,0)
// 	.domain([0,700]);
	// .domain(0,d3.max(grouped_ratings, function(d){
	// 	return d3.average_rating
	//}));

// var graph = svg.selectAll(".line.path")
//       .attr("class", "graph")
//      .data(grouped_ratings)
//      .enter().append('path')
     
			var ratxAxis = svg.append("g")
			                .attr("id", "x-axis-lines")
			                .attr("transform", "translate(" + margin.left + "," + (height + margin.top) + ")")
			                .call(d3.axisBottom().scale(xScale).ticks(10))
// var xAxis = d3.axisBottom()
// .scale(xScale)
// .tickFormat(d3.timeFormat("%Y"))    
//         .ticks(5);
			var yScale = d3.scaleLinear()
			.domain([0,maxYear])
			.range([height,0]);

			var ratyAxis = svg.append("g")
                .attr("id", "y-axis-lines")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                .call(d3.axisLeft().scale(yScale))


// var yAxis = d3.axisLeft()
//     .scale(yScale)


			var line = d3.line()
			  .x(function(d) { return xScale(d.key); })
			  .y(function(d) { return yScale(d.value); }); 


			const lines = ratLines.selectAll("lines")
				.data([grouped_ratings[4],grouped_ratings[5],grouped_ratings[6],grouped_ratings[7],grouped_ratings[8]])
				.enter() 


			 lines.append("path")
                .attr("class", ids)
                .attr("d", function (d, i) {
                    return line(d.values)
                })
                .attr("stroke", function (d, i) { return color[i] })
                .attr("fill", "none");


             var ratCircles = svg.append("g")
                .attr("id", "circles")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

            const nodes = ratCircles.selectAll("circles")
            for (let r = 0; r < grouped_ratings[0].values.length; r++) {

                cnt = 0
                nodes.append("circle")
                    .attr("class", ids)
                    //.attr("class", k.toString())
                    .attr("id", r)
                    .attr("r", 3)
                    .attr("cx", function (d, i) { return xScale(d.values[r].key) })
                    .attr("cy", function (d) { return yScale(d.values[r].value) })
                    .attr("fill", function (d, i) { return color[i] })
                    .on("mouseover", mouseOver)
                    .on("mouseleave", mouseLeave)
            }

            svg
                .append("g")
                .attr("id", "line_chart_title")
                .append("text")
                .text("Board games by Rating 2015-2019")
                .attr("y", margin.top / 2)
                .attr("x", width / 2)
                .style("font", "15px sans-serif")
                .style("font-weight", "bold")
                .attr('text-anchor', 'middle')

            



 // d3.select("svg").append("g")
 //    .attr("class","xAxis")
 //    .attr("transform", "translate("+ 50+"," + (height) + ")") //use variable in translate
 //    .call(ratxAxis)
 //    .append("text")
 //    .attr("transform", "rotate(-90)")
 //    .attr("x", "475")
 //    .attr("y", "50")
 //    .attr("text-anchor", "end")
 //    .text("Rating")


// svg.append("g")
//     .attr("class", "yAxis")
//     .attr("id", "yAxis")
//     .attr("transform", "translate(50,20)") //use variable in translate
//     .call(yAxis)
//     .append("text")
//     .attr("transform", "rotate(-90)")
//     .attr("x", "100")
//     .attr("y", "-100")
//     .attr("text-anchor", "end")
//     .text("reviews")
    //} );

// var lineGen = d3.line()
//   .x(function(d) {
//     return xScale(d.year);
//   })
//   .y(function(d) {
//     return yScale(d.tot_rat);
//   });

});


//X and y scales 




</script>
</body> 
<!-- </html> -->


